// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @unique @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  fullname    String?
  bio         String?
  designation String?
  links       String?
  location    String?
  createOn    DateTime @default(now())

  tweets   Tweet[]
  likes    Like[]
  repost   Repost[]
  bookmark Bookmark[]
  comment  Comment[]
  followedBy  Follow[]  @relation("followedBy")
  following  Follow[]   @relation("following")
}

model Tweet {
  id           Int      @id @unique @default(autoincrement())
  userId       Int
  text         String
  reposts      Int?     @default(0)
  likes        Int?     @default(0)
  views        Int?     @default(0)
  bookmarks    Int?     @default(0)
  isLiked      Boolean  @default(false)
  isBookmarked Boolean  @default(false)
  createOn     DateTime @default(now())

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  like     Like[]
  repost   Repost[]
  bookmark Bookmark[]
  comment  Comment[]
}

model Like {
  id      Int @id @default(autoincrement())
  userId  Int 
  tweetId Int

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Repost {
  id      Int @id @default(autoincrement())
  userId  Int 
  tweetId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id      Int @id @default(autoincrement())
  userId  Int 
  tweetId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Comment {
  id           Int      @id @default(autoincrement())
  userId       Int
  tweetId      Int?
  parentCommentId    Int?
  text         String
  reposts      Int?     @default(0)
  likes        Int?     @default(0)
  views        Int?     @default(0)
  bookmarks    Int?     @default(0)
  createOn     DateTime @default(now())

  parentComment Comment?  @relation("NestedComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments Comment[] @relation("NestedComments")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet? @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Follow {
  id          Int    @id @default(autoincrement())
  followedById  Int
  followingId   Int

  followedBy  User   @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followedById, followingId])
}